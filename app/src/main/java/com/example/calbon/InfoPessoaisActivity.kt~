package com.example.calbon

import android.os.Bundle
import android.widget.ImageView
import android.widget.TextView
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.lifecycle.lifecycleScope
import com.example.calbon.api.RetrofitClient
import com.example.calbon.api.UsuarioDetalhe
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class InfoPessoaisActivity : AppCompatActivity(), ChangeUsernameDialogListener {

    private lateinit var nome_completo: TextView
    private lateinit var localizacao: TextView
    private lateinit var email: TextView
    private lateinit var senha: TextView

    private fun showChangeDialog(title: String, subtitle: String, field: String) {
        val dialog = ChangeUsernameDialogFragment()
        val bundle = Bundle()
        bundle.putString("title", title)
        bundle.putString("subtitle", subtitle)
        bundle.putString("field", field)
        dialog.arguments = bundle
        dialog.show(supportFragmentManager, "change$field")
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_info_pessoais)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        nome_completo = findViewById(R.id.nome_completo)
        localizacao = findViewById(R.id.localizacao)
        email = findViewById(R.id.email)
        senha = findViewById(R.id.senha)

        val editar_nome = findViewById<ImageView>(R.id.editar_nome)
        val editar_localizazao = findViewById<ImageView>(R.id.editar_localizazao)
        val editar_email = findViewById<ImageView>(R.id.editar_email)
        val editar_senha = findViewById<ImageView>(R.id.editar_senha)
        val voltar = findViewById<ImageView>(R.id.voltar)

        editar_nome.setOnClickListener {
            showChangeDialog("Alterar Nome Completo", nome_completo.text.toString(), "nome_completo")
        }
        editar_localizazao.setOnClickListener {
            showChangeDialog("Alterar Localização", localizacao.text.toString(), "localizacao")
        }
        editar_email.setOnClickListener {
            showChangeDialog("Alterar Email", email.text.toString(), "email")
        }
        editar_senha.setOnClickListener {
            showChangeDialog("Alterar Senha", "Digite a nova senha", "senha")
        }

        voltar.setOnClickListener { finish() }

        // ✅ Buscar usuário ao abrir Activity
        val numeroCracha = intent.getIntExtra("numeroCracha", -1)
        if (numeroCracha != -1) {
            buscarUsuario(numeroCracha)
        }
    }

    private fun buscarUsuario(cracha: Int) {
        lifecycleScope.launch {
            try {
                val resposta = withContext(Dispatchers.IO) {
                    RetrofitClient.apiUsuario.buscarPorCracha(cracha)
                }

                if (resposta.isSuccessful) {
                    val usuario: UsuarioDetalhe? = resposta.body()
                    usuario?.let { preencherCampos(it) }
                } else {
                    nome_completo.text = "Erro ao carregar"
                    email.text = "Erro ao carregar"
                    senha.text = "********"
                    localizacao.text = "Não informado"
                }
            } catch (e: Exception) {
                e.printStackTrace()
                nome_completo.text = "Erro de conexão"
                email.text = "Erro de conexão"
                senha.text = "********"
                localizacao.text = "Não informado"
            }
        }
    }

    private fun preencherCampos(usuario: UsuarioDetalhe) {
        nome_completo.text = "${usuario.nome} ${usuario.sobrenome}"
        email.text = usuario.email
        senha.text = "********" // máscara
        localizacao.text = usuario.setor ?: "Não informado"
    }

    override fun onFieldChanged(field: String, newValue: String) {
        when (field) {
            "nome_completo" -> nome_completo.text = newValue
            "localizacao" -> localizacao.text = newValue
            "email" -> email.text = newValue
            "senha" -> senha.text = "********" // máscara
        }
    }
}
